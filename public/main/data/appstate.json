{"activeSketch":{"dir":"derived","name":"bbf2258b-6a73-4a67-b242-a3228e3354d1","id":"bbf2258b-6a73-4a67-b242-a3228e3354d1"},"code":"/******************\nCode by Vamoss\nOriginal code link:\nhttps://www.openprocessing.org/sketch/744884\n\nAuthor links:\nhttp://vamoss.com.br\nhttp://twitter.com/vamoss\nhttp://github.com/vamoss\n******************/\n\n//Original inspiration\n//https://twitter.com/AidaInma/status/1161205965305393154\n\nconst radius = 50;\nconst altitude = (Math.sqrt(3) / 2) * radius;\nlet hexagons, hexagonPattern, rotations;\nlet changed = -1;\n\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n\n  let hexagonMask = createGraphics(radius * 2, radius * 2);\n  hexagonMask.beginShape();\n  for (let a = 0; a < TWO_PI; a += TWO_PI / 6) {\n    let x = sin(a) * radius + radius;\n    let y = cos(a) * radius + radius;\n    hexagonMask.vertex(x, y);\n  }\n  hexagonMask.endShape();\n\n  let hexagonLines = createGraphics(radius * 2, radius * 2);\n  hexagonLines.noFill();\n  hexagonLines.strokeWeight(20);\n  hexagonLines.ellipse(radius - altitude, radius - radius / 2, radius, radius);\n  hexagonLines.ellipse(radius + altitude * 2, radius, radius * 3, radius * 3);\n  hexagonLines.ellipse(\n    radius + altitude,\n    radius + radius * 1.5,\n    radius * 3,\n    radius * 3\n  );\n  hexagonLines.strokeWeight(16);\n  hexagonLines.stroke(100, 240, 22);\n  hexagonLines.ellipse(radius - altitude, radius - radius / 2, radius, radius);\n  hexagonLines.ellipse(radius + altitude * 2, radius, radius * 3, radius * 3);\n  hexagonLines.ellipse(\n    radius + altitude,\n    radius + radius * 1.5,\n    radius * 3,\n    radius * 3\n  );\n\n  hexagonPattern = createGraphics(radius * 2, radius * 2);\n  hexagonPattern.image(hexagonMask, 0, 0);\n  hexagonPattern.drawingContext.globalCompositeOperation = \"source-in\";\n  hexagonPattern.image(hexagonLines, 0, 0);\n\n  rotations = [];\n  hexagons = [];\n  for (let x = -radius; x < width; x += altitude * 2) {\n    let rowCount = 0;\n    for (let y = -radius; y < height; y += radius * 1.5) {\n      hexagons.push({\n        x: x + (rowCount % 2 == 0 ? 0 : altitude),\n        y: y,\n        rotation: 0,\n      });\n      rotations.push((TWO_PI / 6) * floor(random(6)));\n      rowCount++;\n    }\n  }\n}\n\nfunction draw() {\n  background(255);\n  hexagons.forEach((hexagon, index) => {\n    hexagon.rotation += (rotations[index] - hexagon.rotation) * 0.09;\n    push();\n    translate(hexagon.x + radius, hexagon.y + radius);\n    rotate(hexagon.rotation);\n    translate(-(hexagon.x + radius), -(hexagon.y + radius));\n    image(hexagonPattern, hexagon.x, hexagon.y);\n    pop();\n  });\n}\n\nfunction findClosest() {\n  let closest = 0;\n  let closestDistance = 9999;\n  hexagons.forEach((hexagon, index) => {\n    let d = dist(mouseX, mouseY, hexagon.x + radius, hexagon.y + radius);\n    if (d < closestDistance) {\n      closestDistance = d;\n      closest = index;\n    }\n  });\n  return closest;\n}\n\nfunction mousePressed() {\n  changed = findClosest();\n  rotations[changed] += TWO_PI / 6;\n}\n\nfunction mouseMoved() {\n  let tempChanged = findClosest();\n  if (changed != tempChanged) {\n    changed = tempChanged;\n    rotations[changed] += TWO_PI / 6;\n  }\n}\n","currentInView":{"id":"df6edefa-4edf-4cac-ad47-857afc705e65.js","dir":"temp"}}